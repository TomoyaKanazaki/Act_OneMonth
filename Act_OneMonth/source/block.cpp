//==========================================
//
//  障害物クラス(block.cpp)
//  Author : Tomoya Kanazaki
//
//==========================================
#include "block.h"

//==========================================
//  定数定義
//==========================================
namespace
{
	const D3DXVECTOR3 HIT_POS[4] = // 当たり判定の相対位置
	{
		D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		D3DXVECTOR3(0.0f, 0.0f, 0.0f)
	};
	const D3DXVECTOR3 HIT_SIZE[4] = // 当たり判定のサイズ
	{
		D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		D3DXVECTOR3(0.0f, 0.0f, 0.0f)
	};
}

//==========================================
//  コンストラクタ
//==========================================
CBlock::CBlock()
{
}

//==========================================
//  デストラクタ
//==========================================
CBlock::~CBlock()
{
}

//==========================================
//  初期化処理
//==========================================
HRESULT CBlock::Init(void)
{
	// 初期化
	HRESULT hr = CObject_Char::Init();

	return hr;
}

//==========================================
//  終了処理
//==========================================
void CBlock::Uninit(void)
{
	CObject_Char::Uninit();
}

//==========================================
//  更新処理
//==========================================
void CBlock::Update(void)
{
	// 更新
	CObject_Char::Update();
}

//==========================================
//  描画処理
//==========================================
void CBlock::Draw(void)
{
	CObject_Char::Draw();
}

//==========================================
//  生成処理
//==========================================
CBlock* CBlock::Create(const D3DXVECTOR3& pos)
{
	// インスタンス生成
	CBlock* pBlock = new CBlock;

	// NULLチェック
	if (pBlock == nullptr) { return nullptr; }

	// 値を設定
	pBlock->m_pos = pos;

	// 初期化処理
	pBlock->Init();

	return pBlock;
}
